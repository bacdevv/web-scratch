@use "sass:math";
@use "sass:map";

$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px,
);

$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px,
);

$gutters: (
  0: 0,
  1: 0.25,
  2: 0.5,
  3: 1,
  4: 1.5,
  5: 3,
);

$grid-columns: 12;
$grid-gutter-width: 3rem;

%gutter-padding {
  padding-left: calc(var(--grid-gutter-x) / 2);
  padding-right: calc(var(--grid-gutter-x) / 2);
}

.container {
  @extend .container-fluid;
}

.container-fluid {
  @extend %gutter-padding;

  --grid-gutter-x: #{$grid-gutter-width};
  --grid-gutter-y: 0;

  margin-left: auto;
  margin-right: auto;
}

.row {
  display: flex;
  flex-wrap: wrap;
  margin-top: calc(var(--grid-gutter-y) * -1);
  margin-left: calc(var(--grid-gutter-x) / 2 * -1);
  margin-right: calc(var(--grid-gutter-x) / 2 * -1);

  > * {
    @extend %gutter-padding;
    margin-top: var(--grid-gutter-y);
  }
}

.col {
  flex: 1 0;
}

@mixin make-media-query($dimension, $bypass: false) {
  @if ($bypass) {
    @content;
  } @else {
    @media (min-width: $dimension) {
      @content;
    }
  }
}

@mixin make-columns($infix) {
  @for $i from 1 through $grid-columns {
    .col#{$infix}-#{$i} {
      flex: 0 0 auto;
      width: math.div(100%, $grid-columns) * $i;
    }
  }
}

@mixin make-row-columns($infix) {
  @for $i from 1 through $grid-columns * 0.5 {
    .row-cols#{$infix}-#{$i} > * {
      flex: 0 0 auto;
      width: math.div(100%, $i);
    }
  }
}

@mixin make-offset($infix) {
  @for $i from 0 to $grid-columns {
    .offset#{$infix}-#{$i} {
      flex: 0 0 auto;
      margin-left: math.div(100%, $grid-columns) * $i;
    }
  }
}

@mixin make-gutter($infix) {
  @each $i, $ratio in $gutters {
    .g#{$infix}-#{$i},
    .gx#{$infix}-#{$i} {
      --grid-gutter-x: #{$grid-gutter-width * $ratio};
    }
    .g#{$infix}-#{$i},
    .gy#{$infix}-#{$i} {
      --grid-gutter-y: #{$grid-gutter-width * $ratio};
    }
  }
}

@each $breakpoint, $dimension in $grid-breakpoints {
  $max-width: map.get($container-max-widths, $breakpoint);
  $is-xs: $breakpoint == xs;
  $infix: if($is-xs, "", "-#{$breakpoint}");

  @include make-media-query($dimension, $is-xs) {
    .container {
      max-width: $max-width;
    }

    @include make-row-columns($infix);

    @include make-columns($infix);

    @include make-offset($infix);

    @include make-gutter($infix);
  }
}
